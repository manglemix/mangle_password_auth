[2022-06-10 06:44:39 ERROR] Faced the following error while connecting to MangleDB:
	Os { code: 2, kind: NotFound, message: "The system cannot find the file specified." }
[2022-06-10 17:15:02 ERROR] Faced the following error while connecting to MangleDB:
	Os { code: 2, kind: NotFound, message: "The system cannot find the file specified." }
[2022-06-12 21:44:22 ERROR] Faced the following error while instantiating bipipe:
	Os { code: 2, kind: NotFound, message: "The system cannot find the file specified." }
[2022-06-12 22:06:14 ERROR] Faced the following error while instantiating bipipe:
	Os { code: 231, kind: Uncategorized, message: "All pipe instances are busy." }
[2022-06-13 04:27:21 ERROR] Faced the following error while instantiating bipipe:
	Os { code: 109, kind: BrokenPipe, message: "The pipe has been ended." }
[2022-06-13 04:29:00 ERROR] Faced the following error while instantiating bipipe:
	Os { code: 109, kind: BrokenPipe, message: "The pipe has been ended." }
[2022-06-13 04:32:24 ERROR] Faced the following error while instantiating bipipe:
	Os { code: 109, kind: BrokenPipe, message: "The pipe has been ended." }
[2022-06-13 04:35:33 ERROR] Faced the following error while instantiating bipipe:
	Os { code: 109, kind: BrokenPipe, message: "The pipe has been ended." }
[2022-06-13 04:54:43 ERROR] Faced the following error while instantiating bipipe:
	Os { code: 109, kind: BrokenPipe, message: "The pipe has been ended." }
[2022-06-13 05:02:47 ERROR] Faced the following error while instantiating bipipe:
	Os { code: 109, kind: BrokenPipe, message: "The pipe has been ended." }
[2022-06-13 05:14:52 ERROR] Faced the following error while instantiating bipipe:
	Os { code: 109, kind: BrokenPipe, message: "The pipe has been ended." }
[2022-06-17 06:29:59 ERROR] Faced the following error while serving http:
	Collisions(Collisions { routes: [(Route { name: Some("get_session_with_password"), method: Get, uri: RouteUri { base: Origin { source: Some("///"), path: Data { value: "/", decoded_segments: [uninitialized storage] }, query: None }, unmounted_origin: Origin { source: None, path: Data { value: "/<username>", decoded_segments: [uninitialized storage] }, query: Some(Data { value: "<password>", decoded_segments: [uninitialized storage] }) }, origin: Origin { source: None, path: Data { value: "/<username>", decoded_segments: [uninitialized storage] }, query: Some(Data { value: "<password>", decoded_segments: [uninitialized storage] }) }, metadata: Metadata { base_segs: [], path_segs: [Segment { value: "username", dynamic: true, trailing: false }], static_query_fields: [], path_color: Wild, query_color: Some(Wild), trailing_path: false } }, rank: -2, format: None }, Route { name: Some("get_session_with_key"), method: Get, uri: RouteUri { base: Origin { source: Some("///"), path: Data { value: "/", decoded_segments: [uninitialized storage] }, query: None }, unmounted_origin: Origin { source: None, path: Data { value: "/<username>", decoded_segments: [uninitialized storage] }, query: Some(Data { value: "<challenge>&<signature>", decoded_segments: [uninitialized storage] }) }, origin: Origin { source: None, path: Data { value: "/<username>", decoded_segments: [uninitialized storage] }, query: Some(Data { value: "<challenge>&<signature>", decoded_segments: [uninitialized storage] }) }, metadata: Metadata { base_segs: [], path_segs: [Segment { value: "username", dynamic: true, trailing: false }], static_query_fields: [], path_color: Wild, query_color: Some(Wild), trailing_path: false } }, rank: -2, format: None })], catchers: [] })
[2022-06-17 06:31:17 ERROR] Faced the following error while serving http:
	Collisions(Collisions { routes: [(Route { name: Some("get_session_with_password"), method: Get, uri: RouteUri { base: Origin { source: Some("//"), path: Data { value: "/", decoded_segments: [uninitialized storage] }, query: None }, unmounted_origin: Origin { source: None, path: Data { value: "/<username>", decoded_segments: [uninitialized storage] }, query: Some(Data { value: "<password>", decoded_segments: [uninitialized storage] }) }, origin: Origin { source: None, path: Data { value: "/<username>", decoded_segments: [uninitialized storage] }, query: Some(Data { value: "<password>", decoded_segments: [uninitialized storage] }) }, metadata: Metadata { base_segs: [], path_segs: [Segment { value: "username", dynamic: true, trailing: false }], static_query_fields: [], path_color: Wild, query_color: Some(Wild), trailing_path: false } }, rank: -2, format: None }, Route { name: Some("get_session_with_key"), method: Get, uri: RouteUri { base: Origin { source: Some("//"), path: Data { value: "/", decoded_segments: [uninitialized storage] }, query: None }, unmounted_origin: Origin { source: None, path: Data { value: "/<username>", decoded_segments: [uninitialized storage] }, query: Some(Data { value: "<challenge>&<signature>", decoded_segments: [uninitialized storage] }) }, origin: Origin { source: None, path: Data { value: "/<username>", decoded_segments: [uninitialized storage] }, query: Some(Data { value: "<challenge>&<signature>", decoded_segments: [uninitialized storage] }) }, metadata: Metadata { base_segs: [], path_segs: [Segment { value: "username", dynamic: true, trailing: false }], static_query_fields: [], path_color: Wild, query_color: Some(Wild), trailing_path: false } }, rank: -2, format: None })], catchers: [] })
[2022-06-17 06:31:42 ERROR] Faced the following error while serving http:
	Collisions(Collisions { routes: [(Route { name: Some("get_session_with_password"), method: Get, uri: RouteUri { base: Origin { source: Some("//"), path: Data { value: "/", decoded_segments: [uninitialized storage] }, query: None }, unmounted_origin: Origin { source: None, path: Data { value: "/<username>", decoded_segments: [uninitialized storage] }, query: Some(Data { value: "<password>", decoded_segments: [uninitialized storage] }) }, origin: Origin { source: None, path: Data { value: "/<username>", decoded_segments: [uninitialized storage] }, query: Some(Data { value: "<password>", decoded_segments: [uninitialized storage] }) }, metadata: Metadata { base_segs: [], path_segs: [Segment { value: "username", dynamic: true, trailing: false }], static_query_fields: [], path_color: Wild, query_color: Some(Wild), trailing_path: false } }, rank: -2, format: None }, Route { name: Some("get_session_with_key"), method: Get, uri: RouteUri { base: Origin { source: Some("//"), path: Data { value: "/", decoded_segments: [uninitialized storage] }, query: None }, unmounted_origin: Origin { source: None, path: Data { value: "/<username>", decoded_segments: [uninitialized storage] }, query: Some(Data { value: "<challenge>&<signature>", decoded_segments: [uninitialized storage] }) }, origin: Origin { source: None, path: Data { value: "/<username>", decoded_segments: [uninitialized storage] }, query: Some(Data { value: "<challenge>&<signature>", decoded_segments: [uninitialized storage] }) }, metadata: Metadata { base_segs: [], path_segs: [Segment { value: "username", dynamic: true, trailing: false }], static_query_fields: [], path_color: Wild, query_color: Some(Wild), trailing_path: false } }, rank: -2, format: None })], catchers: [] })
[2022-06-17 06:32:30 ERROR] Faced the following error while serving http:
	Collisions(Collisions { routes: [(Route { name: Some("get_session_with_password"), method: Get, uri: RouteUri { base: Origin { source: Some("//"), path: Data { value: "/", decoded_segments: [uninitialized storage] }, query: None }, unmounted_origin: Origin { source: None, path: Data { value: "/<username>", decoded_segments: [uninitialized storage] }, query: Some(Data { value: "<password>", decoded_segments: [uninitialized storage] }) }, origin: Origin { source: None, path: Data { value: "/<username>", decoded_segments: [uninitialized storage] }, query: Some(Data { value: "<password>", decoded_segments: [uninitialized storage] }) }, metadata: Metadata { base_segs: [], path_segs: [Segment { value: "username", dynamic: true, trailing: false }], static_query_fields: [], path_color: Wild, query_color: Some(Wild), trailing_path: false } }, rank: -2, format: None }, Route { name: Some("get_session_with_key"), method: Get, uri: RouteUri { base: Origin { source: Some("//"), path: Data { value: "/", decoded_segments: [uninitialized storage] }, query: None }, unmounted_origin: Origin { source: None, path: Data { value: "/<username>", decoded_segments: [uninitialized storage] }, query: Some(Data { value: "<challenge>&<signature>", decoded_segments: [uninitialized storage] }) }, origin: Origin { source: None, path: Data { value: "/<username>", decoded_segments: [uninitialized storage] }, query: Some(Data { value: "<challenge>&<signature>", decoded_segments: [uninitialized storage] }) }, metadata: Metadata { base_segs: [], path_segs: [Segment { value: "username", dynamic: true, trailing: false }], static_query_fields: [], path_color: Wild, query_color: Some(Wild), trailing_path: false } }, rank: -2, format: None })], catchers: [] })
[2022-06-17 17:28:20 ERROR] Handler get_session_with_password panicked.
[2022-06-17 17:32:29 ERROR] Faced the following error while creating bipipe:
	Os { code: 2, kind: NotFound, message: "The system cannot find the file specified." }
[2022-06-17 22:02:33 ERROR] Faced the following error while creating bipipe:
	Os { code: 109, kind: BrokenPipe, message: "The pipe has been ended." }
[2022-06-20 23:54:42 ERROR] Faced the following error while creating bipipe:
	Os { code: 231, kind: Uncategorized, message: "All pipe instances are busy." }
[2022-06-21 00:08:44 ERROR] MangleDB has closed the connections
[2022-06-21 00:10:07 ERROR] MangleDB has closed the connections
[2022-06-22 05:11:14 ERROR] Unrecognised header 108
[2022-06-22 18:18:37 ERROR] Faced the following error while serving http:
	Shutdown(Orbiting { router: Router { routes: {Get: [Route { name: Some("get_session_with_password"), method: Get, uri: RouteUri { base: Origin { source: Some("//"), path: Data { value: "/", decoded_segments: [uninitialized storage] }, query: None }, unmounted_origin: Origin { source: None, path: Data { value: "/users_with_password", decoded_segments: [uninitialized storage] }, query: Some(Data { value: "<username>&<password>", decoded_segments: [uninitialized storage] }) }, origin: Origin { source: None, path: Data { value: "/users_with_password", decoded_segments: [uninitialized storage] }, query: Some(Data { value: "<username>&<password>", decoded_segments: [uninitialized storage] }) }, metadata: Metadata { base_segs: [], path_segs: [Segment { value: "users_with_password", dynamic: false, trailing: false }], static_query_fields: [], path_color: Static, query_color: Some(Wild), trailing_path: false } }, rank: -10, format: None }, Route { name: Some("get_session_with_key"), method: Get, uri: RouteUri { base: Origin { source: Some("//"), path: Data { value: "/", decoded_segments: [uninitialized storage] }, query: None }, unmounted_origin: Origin { source: None, path: Data { value: "/users_with_key", decoded_segments: [uninitialized storage] }, query: Some(Data { value: "<username>&<challenge>&<signature>", decoded_segments: [uninitialized storage] }) }, origin: Origin { source: None, path: Data { value: "/users_with_key", decoded_segments: [uninitialized storage] }, query: Some(Data { value: "<username>&<challenge>&<signature>", decoded_segments: [uninitialized storage] }) }, metadata: Metadata { base_segs: [], path_segs: [Segment { value: "users_with_key", dynamic: false, trailing: false }], static_query_fields: [], path_color: Static, query_color: Some(Wild), trailing_path: false } }, rank: -10, format: None }, Route { name: Some("borrow_resource"), method: Get, uri: RouteUri { base: Origin { source: Some("//"), path: Data { value: "/", decoded_segments: [uninitialized storage] }, query: None }, unmounted_origin: Origin { source: None, path: Data { value: "/<path..>", decoded_segments: [uninitialized storage] }, query: None }, origin: Origin { source: None, path: Data { value: "/<path..>", decoded_segments: [uninitialized storage] }, query: None }, metadata: Metadata { base_segs: [], path_segs: [Segment { value: "path", dynamic: true, trailing: true }], static_query_fields: [], path_color: Wild, query_color: None, trailing_path: true } }, rank: -1, format: None }], Put: [Route { name: Some("replace_resource"), method: Put, uri: RouteUri { base: Origin { source: Some("//"), path: Data { value: "/", decoded_segments: [uninitialized storage] }, query: None }, unmounted_origin: Origin { source: None, path: Data { value: "/<path..>", decoded_segments: [uninitialized storage] }, query: None }, origin: Origin { source: None, path: Data { value: "/<path..>", decoded_segments: [uninitialized storage] }, query: None }, metadata: Metadata { base_segs: [], path_segs: [Segment { value: "path", dynamic: true, trailing: true }], static_query_fields: [], path_color: Wild, query_color: None, trailing_path: true } }, rank: -1, format: None }]}, catchers: {} }, fairings: Fairings { launch: [], liftoff: [Info { name: "Shield", kind: Kind(42) }, Info { name: "notify_liftoff", kind: Kind(2) }], request: [], response: [Info { name: "Shield", kind: Kind(42) }], shutdown: [] }, figment: Figment { profile: Profile(Uncased { string: "debug" }), metadata: {Tag(Default, 9): Metadata { name: "Rocket Config", source: None, provide_location: Some(Location { file: "C:\\Users\\shabo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rocket-0.5.0-rc.2\\src\\config\\config.rs", line: 240, col: 9 }), interpolater:  }, Tag(Default, 10): Metadata { name: "TOML file", source: None, provide_location: Some(Location { file: "C:\\Users\\shabo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rocket-0.5.0-rc.2\\src\\config\\config.rs", line: 241, col: 14 }), interpolater:  }, Tag(Default, 11): Metadata { name: "`ROCKET_` environment variable(s)", source: None, provide_location: Some(Location { file: "C:\\Users\\shabo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rocket-0.5.0-rc.2\\src\\config\\config.rs", line: 242, col: 14 }), interpolater:  }, Tag(Default, 12): Metadata { name: "Default", source: None, provide_location: Some(Location { file: "C:\\Users\\shabo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rocket-0.5.0-rc.2\\src\\rocket.rs", line: 187, col: 22 }), interpolater:  }}, value: Ok({Profile(Uncased { string: "default" }): {"address": String(Tag(Default, 9), "127.0.0.1"), "cli_colors": Bool(Tag(Default, 9), true), "ident": String(Tag(Default, 9), "Rocket"), "keep_alive": Num(Tag(Default, 9), U32(5)), "limits": Dict(Tag(Default, 9), {"bytes": Num(Tag(Default, 9), U64(8192)), "data-form": Num(Tag(Default, 9), U64(2097152)), "file": Num(Tag(Default, 9), U64(1048576)), "form": Num(Tag(Default, 9), U64(32768)), "json": Num(Tag(Default, 9), U64(1048576)), "msgpack": Num(Tag(Default, 9), U64(1048576)), "string": Num(Tag(Default, 9), U64(8192))}), "log_level": String(Tag(Default, 9), "normal"), "port": Num(Tag(Default, 9), U16(8000)), "shutdown": Dict(Tag(Default, 9), {"ctrlc": Bool(Tag(Default, 9), true), "force": Bool(Tag(Default, 9), true), "grace": Num(Tag(Default, 9), U32(2)), "mercy": Num(Tag(Default, 9), U32(3))}), "temp_dir": String(Tag(Default, 9), "C:\\Users\\shabo\\AppData\\Local\\Temp\\"), "workers": Num(Tag(Default, 9), U64(16))}, Profile(Uncased { string: "global" }): {}}) }, config: Config { profile: Profile(Uncased { string: "debug" }), address: 127.0.0.1, port: 8000, workers: 16, ident: Ident(Some("Rocket")), limits: Limits { limits: [(Uncased { string: "bytes" }, ByteUnit(8192)), (Uncased { string: "data-form" }, ByteUnit(2097152)), (Uncased { string: "file" }, ByteUnit(1048576)), (Uncased { string: "form" }, ByteUnit(32768)), (Uncased { string: "json" }, ByteUnit(1048576)), (Uncased { string: "msgpack" }, ByteUnit(1048576)), (Uncased { string: "string" }, ByteUnit(8192))] }, temp_dir: RelativePathBuf { metadata_path: None, path: "C:\\Users\\shabo\\AppData\\Local\\Temp\\" }, keep_alive: 5, shutdown: Shutdown { ctrlc: true, grace: 2, mercy: 3, force: true, __non_exhaustive: () }, log_level: Normal, cli_colors: true, __non_exhaustive: () }, state: Container { len: 0 }, shutdown: Shutdown(TripWire { tripped: true }) }, None)
[2022-06-22 18:19:22 ERROR] Faced the following error while serving http:
	Shutdown(Orbiting { router: Router { routes: {Put: [Route { name: Some("replace_resource"), method: Put, uri: RouteUri { base: Origin { source: Some("//"), path: Data { value: "/", decoded_segments: [uninitialized storage] }, query: None }, unmounted_origin: Origin { source: None, path: Data { value: "/<path..>", decoded_segments: [uninitialized storage] }, query: None }, origin: Origin { source: None, path: Data { value: "/<path..>", decoded_segments: [uninitialized storage] }, query: None }, metadata: Metadata { base_segs: [], path_segs: [Segment { value: "path", dynamic: true, trailing: true }], static_query_fields: [], path_color: Wild, query_color: None, trailing_path: true } }, rank: -1, format: None }], Get: [Route { name: Some("get_session_with_password"), method: Get, uri: RouteUri { base: Origin { source: Some("//"), path: Data { value: "/", decoded_segments: [uninitialized storage] }, query: None }, unmounted_origin: Origin { source: None, path: Data { value: "/users_with_password", decoded_segments: [uninitialized storage] }, query: Some(Data { value: "<username>&<password>", decoded_segments: [uninitialized storage] }) }, origin: Origin { source: None, path: Data { value: "/users_with_password", decoded_segments: [uninitialized storage] }, query: Some(Data { value: "<username>&<password>", decoded_segments: [uninitialized storage] }) }, metadata: Metadata { base_segs: [], path_segs: [Segment { value: "users_with_password", dynamic: false, trailing: false }], static_query_fields: [], path_color: Static, query_color: Some(Wild), trailing_path: false } }, rank: -10, format: None }, Route { name: Some("get_session_with_key"), method: Get, uri: RouteUri { base: Origin { source: Some("//"), path: Data { value: "/", decoded_segments: [uninitialized storage] }, query: None }, unmounted_origin: Origin { source: None, path: Data { value: "/users_with_key", decoded_segments: [uninitialized storage] }, query: Some(Data { value: "<username>&<challenge>&<signature>", decoded_segments: [uninitialized storage] }) }, origin: Origin { source: None, path: Data { value: "/users_with_key", decoded_segments: [uninitialized storage] }, query: Some(Data { value: "<username>&<challenge>&<signature>", decoded_segments: [uninitialized storage] }) }, metadata: Metadata { base_segs: [], path_segs: [Segment { value: "users_with_key", dynamic: false, trailing: false }], static_query_fields: [], path_color: Static, query_color: Some(Wild), trailing_path: false } }, rank: -10, format: None }, Route { name: Some("borrow_resource"), method: Get, uri: RouteUri { base: Origin { source: Some("//"), path: Data { value: "/", decoded_segments: [uninitialized storage] }, query: None }, unmounted_origin: Origin { source: None, path: Data { value: "/<path..>", decoded_segments: [uninitialized storage] }, query: None }, origin: Origin { source: None, path: Data { value: "/<path..>", decoded_segments: [uninitialized storage] }, query: None }, metadata: Metadata { base_segs: [], path_segs: [Segment { value: "path", dynamic: true, trailing: true }], static_query_fields: [], path_color: Wild, query_color: None, trailing_path: true } }, rank: -1, format: None }]}, catchers: {} }, fairings: Fairings { launch: [], liftoff: [Info { name: "Shield", kind: Kind(42) }, Info { name: "notify_liftoff", kind: Kind(2) }], request: [], response: [Info { name: "Shield", kind: Kind(42) }], shutdown: [] }, figment: Figment { profile: Profile(Uncased { string: "debug" }), metadata: {Tag(Default, 9): Metadata { name: "Rocket Config", source: None, provide_location: Some(Location { file: "C:\\Users\\shabo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rocket-0.5.0-rc.2\\src\\config\\config.rs", line: 240, col: 9 }), interpolater:  }, Tag(Default, 10): Metadata { name: "TOML file", source: None, provide_location: Some(Location { file: "C:\\Users\\shabo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rocket-0.5.0-rc.2\\src\\config\\config.rs", line: 241, col: 14 }), interpolater:  }, Tag(Default, 11): Metadata { name: "`ROCKET_` environment variable(s)", source: None, provide_location: Some(Location { file: "C:\\Users\\shabo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rocket-0.5.0-rc.2\\src\\config\\config.rs", line: 242, col: 14 }), interpolater:  }, Tag(Default, 12): Metadata { name: "Default", source: None, provide_location: Some(Location { file: "C:\\Users\\shabo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rocket-0.5.0-rc.2\\src\\rocket.rs", line: 187, col: 22 }), interpolater:  }}, value: Ok({Profile(Uncased { string: "default" }): {"address": String(Tag(Default, 9), "127.0.0.1"), "cli_colors": Bool(Tag(Default, 9), true), "ident": String(Tag(Default, 9), "Rocket"), "keep_alive": Num(Tag(Default, 9), U32(5)), "limits": Dict(Tag(Default, 9), {"bytes": Num(Tag(Default, 9), U64(8192)), "data-form": Num(Tag(Default, 9), U64(2097152)), "file": Num(Tag(Default, 9), U64(1048576)), "form": Num(Tag(Default, 9), U64(32768)), "json": Num(Tag(Default, 9), U64(1048576)), "msgpack": Num(Tag(Default, 9), U64(1048576)), "string": Num(Tag(Default, 9), U64(8192))}), "log_level": String(Tag(Default, 9), "normal"), "port": Num(Tag(Default, 9), U16(8000)), "shutdown": Dict(Tag(Default, 9), {"ctrlc": Bool(Tag(Default, 9), true), "force": Bool(Tag(Default, 9), true), "grace": Num(Tag(Default, 9), U32(2)), "mercy": Num(Tag(Default, 9), U32(3))}), "temp_dir": String(Tag(Default, 9), "C:\\Users\\shabo\\AppData\\Local\\Temp\\"), "workers": Num(Tag(Default, 9), U64(16))}, Profile(Uncased { string: "global" }): {}}) }, config: Config { profile: Profile(Uncased { string: "debug" }), address: 127.0.0.1, port: 8000, workers: 16, ident: Ident(Some("Rocket")), limits: Limits { limits: [(Uncased { string: "bytes" }, ByteUnit(8192)), (Uncased { string: "data-form" }, ByteUnit(2097152)), (Uncased { string: "file" }, ByteUnit(1048576)), (Uncased { string: "form" }, ByteUnit(32768)), (Uncased { string: "json" }, ByteUnit(1048576)), (Uncased { string: "msgpack" }, ByteUnit(1048576)), (Uncased { string: "string" }, ByteUnit(8192))] }, temp_dir: RelativePathBuf { metadata_path: None, path: "C:\\Users\\shabo\\AppData\\Local\\Temp\\" }, keep_alive: 5, shutdown: Shutdown { ctrlc: true, grace: 2, mercy: 3, force: true, __non_exhaustive: () }, log_level: Normal, cli_colors: true, __non_exhaustive: () }, state: Container { len: 0 }, shutdown: Shutdown(TripWire { tripped: true }) }, None)
[2022-06-22 18:37:24 ERROR] Faced the following error while serving http:
	Shutdown(Orbiting { router: Router { routes: {Get: [Route { name: Some("get_session_with_password"), method: Get, uri: RouteUri { base: Origin { source: Some("//"), path: Data { value: "/", decoded_segments: [uninitialized storage] }, query: None }, unmounted_origin: Origin { source: None, path: Data { value: "/users_with_password", decoded_segments: [uninitialized storage] }, query: Some(Data { value: "<username>&<password>", decoded_segments: [uninitialized storage] }) }, origin: Origin { source: None, path: Data { value: "/users_with_password", decoded_segments: [uninitialized storage] }, query: Some(Data { value: "<username>&<password>", decoded_segments: [uninitialized storage] }) }, metadata: Metadata { base_segs: [], path_segs: [Segment { value: "users_with_password", dynamic: false, trailing: false }], static_query_fields: [], path_color: Static, query_color: Some(Wild), trailing_path: false } }, rank: -10, format: None }, Route { name: Some("get_session_with_key"), method: Get, uri: RouteUri { base: Origin { source: Some("//"), path: Data { value: "/", decoded_segments: [uninitialized storage] }, query: None }, unmounted_origin: Origin { source: None, path: Data { value: "/users_with_key", decoded_segments: [uninitialized storage] }, query: Some(Data { value: "<username>&<challenge>&<signature>", decoded_segments: [uninitialized storage] }) }, origin: Origin { source: None, path: Data { value: "/users_with_key", decoded_segments: [uninitialized storage] }, query: Some(Data { value: "<username>&<challenge>&<signature>", decoded_segments: [uninitialized storage] }) }, metadata: Metadata { base_segs: [], path_segs: [Segment { value: "users_with_key", dynamic: false, trailing: false }], static_query_fields: [], path_color: Static, query_color: Some(Wild), trailing_path: false } }, rank: -10, format: None }, Route { name: Some("borrow_resource"), method: Get, uri: RouteUri { base: Origin { source: Some("//"), path: Data { value: "/", decoded_segments: [uninitialized storage] }, query: None }, unmounted_origin: Origin { source: None, path: Data { value: "/<path..>", decoded_segments: [uninitialized storage] }, query: None }, origin: Origin { source: None, path: Data { value: "/<path..>", decoded_segments: [uninitialized storage] }, query: None }, metadata: Metadata { base_segs: [], path_segs: [Segment { value: "path", dynamic: true, trailing: true }], static_query_fields: [], path_color: Wild, query_color: None, trailing_path: true } }, rank: -1, format: None }], Put: [Route { name: Some("replace_resource"), method: Put, uri: RouteUri { base: Origin { source: Some("//"), path: Data { value: "/", decoded_segments: [uninitialized storage] }, query: None }, unmounted_origin: Origin { source: None, path: Data { value: "/<path..>", decoded_segments: [uninitialized storage] }, query: None }, origin: Origin { source: None, path: Data { value: "/<path..>", decoded_segments: [uninitialized storage] }, query: None }, metadata: Metadata { base_segs: [], path_segs: [Segment { value: "path", dynamic: true, trailing: true }], static_query_fields: [], path_color: Wild, query_color: None, trailing_path: true } }, rank: -1, format: None }]}, catchers: {} }, fairings: Fairings { launch: [], liftoff: [Info { name: "Shield", kind: Kind(42) }, Info { name: "notify_liftoff", kind: Kind(2) }], request: [], response: [Info { name: "Shield", kind: Kind(42) }], shutdown: [] }, figment: Figment { profile: Profile(Uncased { string: "debug" }), metadata: {Tag(Default, 9): Metadata { name: "Rocket Config", source: None, provide_location: Some(Location { file: "C:\\Users\\shabo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rocket-0.5.0-rc.2\\src\\config\\config.rs", line: 240, col: 9 }), interpolater:  }, Tag(Default, 10): Metadata { name: "TOML file", source: None, provide_location: Some(Location { file: "C:\\Users\\shabo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rocket-0.5.0-rc.2\\src\\config\\config.rs", line: 241, col: 14 }), interpolater:  }, Tag(Default, 11): Metadata { name: "`ROCKET_` environment variable(s)", source: None, provide_location: Some(Location { file: "C:\\Users\\shabo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rocket-0.5.0-rc.2\\src\\config\\config.rs", line: 242, col: 14 }), interpolater:  }, Tag(Default, 12): Metadata { name: "Default", source: None, provide_location: Some(Location { file: "C:\\Users\\shabo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rocket-0.5.0-rc.2\\src\\rocket.rs", line: 187, col: 22 }), interpolater:  }}, value: Ok({Profile(Uncased { string: "default" }): {"address": String(Tag(Default, 9), "127.0.0.1"), "cli_colors": Bool(Tag(Default, 9), true), "ident": String(Tag(Default, 9), "Rocket"), "keep_alive": Num(Tag(Default, 9), U32(5)), "limits": Dict(Tag(Default, 9), {"bytes": Num(Tag(Default, 9), U64(8192)), "data-form": Num(Tag(Default, 9), U64(2097152)), "file": Num(Tag(Default, 9), U64(1048576)), "form": Num(Tag(Default, 9), U64(32768)), "json": Num(Tag(Default, 9), U64(1048576)), "msgpack": Num(Tag(Default, 9), U64(1048576)), "string": Num(Tag(Default, 9), U64(8192))}), "log_level": String(Tag(Default, 9), "normal"), "port": Num(Tag(Default, 9), U16(8000)), "shutdown": Dict(Tag(Default, 9), {"ctrlc": Bool(Tag(Default, 9), true), "force": Bool(Tag(Default, 9), true), "grace": Num(Tag(Default, 9), U32(2)), "mercy": Num(Tag(Default, 9), U32(3))}), "temp_dir": String(Tag(Default, 9), "C:\\Users\\shabo\\AppData\\Local\\Temp\\"), "workers": Num(Tag(Default, 9), U64(16))}, Profile(Uncased { string: "global" }): {}}) }, config: Config { profile: Profile(Uncased { string: "debug" }), address: 127.0.0.1, port: 8000, workers: 16, ident: Ident(Some("Rocket")), limits: Limits { limits: [(Uncased { string: "bytes" }, ByteUnit(8192)), (Uncased { string: "data-form" }, ByteUnit(2097152)), (Uncased { string: "file" }, ByteUnit(1048576)), (Uncased { string: "form" }, ByteUnit(32768)), (Uncased { string: "json" }, ByteUnit(1048576)), (Uncased { string: "msgpack" }, ByteUnit(1048576)), (Uncased { string: "string" }, ByteUnit(8192))] }, temp_dir: RelativePathBuf { metadata_path: None, path: "C:\\Users\\shabo\\AppData\\Local\\Temp\\" }, keep_alive: 5, shutdown: Shutdown { ctrlc: true, grace: 2, mercy: 3, force: true, __non_exhaustive: () }, log_level: Normal, cli_colors: true, __non_exhaustive: () }, state: Container { len: 0 }, shutdown: Shutdown(TripWire { tripped: true }) }, None)
[2022-06-22 18:39:04 ERROR] Faced the following error while serving http:
	Shutdown(Orbiting { router: Router { routes: {Put: [Route { name: Some("replace_resource"), method: Put, uri: RouteUri { base: Origin { source: Some("//"), path: Data { value: "/", decoded_segments: [uninitialized storage] }, query: None }, unmounted_origin: Origin { source: None, path: Data { value: "/<path..>", decoded_segments: [uninitialized storage] }, query: None }, origin: Origin { source: None, path: Data { value: "/<path..>", decoded_segments: [uninitialized storage] }, query: None }, metadata: Metadata { base_segs: [], path_segs: [Segment { value: "path", dynamic: true, trailing: true }], static_query_fields: [], path_color: Wild, query_color: None, trailing_path: true } }, rank: -1, format: None }], Get: [Route { name: Some("get_session_with_password"), method: Get, uri: RouteUri { base: Origin { source: Some("//"), path: Data { value: "/", decoded_segments: [uninitialized storage] }, query: None }, unmounted_origin: Origin { source: None, path: Data { value: "/users_with_password", decoded_segments: [uninitialized storage] }, query: Some(Data { value: "<username>&<password>", decoded_segments: [uninitialized storage] }) }, origin: Origin { source: None, path: Data { value: "/users_with_password", decoded_segments: [uninitialized storage] }, query: Some(Data { value: "<username>&<password>", decoded_segments: [uninitialized storage] }) }, metadata: Metadata { base_segs: [], path_segs: [Segment { value: "users_with_password", dynamic: false, trailing: false }], static_query_fields: [], path_color: Static, query_color: Some(Wild), trailing_path: false } }, rank: -10, format: None }, Route { name: Some("get_session_with_key"), method: Get, uri: RouteUri { base: Origin { source: Some("//"), path: Data { value: "/", decoded_segments: [uninitialized storage] }, query: None }, unmounted_origin: Origin { source: None, path: Data { value: "/users_with_key", decoded_segments: [uninitialized storage] }, query: Some(Data { value: "<username>&<challenge>&<signature>", decoded_segments: [uninitialized storage] }) }, origin: Origin { source: None, path: Data { value: "/users_with_key", decoded_segments: [uninitialized storage] }, query: Some(Data { value: "<username>&<challenge>&<signature>", decoded_segments: [uninitialized storage] }) }, metadata: Metadata { base_segs: [], path_segs: [Segment { value: "users_with_key", dynamic: false, trailing: false }], static_query_fields: [], path_color: Static, query_color: Some(Wild), trailing_path: false } }, rank: -10, format: None }, Route { name: Some("borrow_resource"), method: Get, uri: RouteUri { base: Origin { source: Some("//"), path: Data { value: "/", decoded_segments: [uninitialized storage] }, query: None }, unmounted_origin: Origin { source: None, path: Data { value: "/<path..>", decoded_segments: [uninitialized storage] }, query: None }, origin: Origin { source: None, path: Data { value: "/<path..>", decoded_segments: [uninitialized storage] }, query: None }, metadata: Metadata { base_segs: [], path_segs: [Segment { value: "path", dynamic: true, trailing: true }], static_query_fields: [], path_color: Wild, query_color: None, trailing_path: true } }, rank: -1, format: None }]}, catchers: {} }, fairings: Fairings { launch: [], liftoff: [Info { name: "Shield", kind: Kind(42) }, Info { name: "notify_liftoff", kind: Kind(2) }], request: [], response: [Info { name: "Shield", kind: Kind(42) }], shutdown: [] }, figment: Figment { profile: Profile(Uncased { string: "debug" }), metadata: {Tag(Default, 10): Metadata { name: "Rocket Config", source: None, provide_location: Some(Location { file: "C:\\Users\\shabo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rocket-0.5.0-rc.2\\src\\config\\config.rs", line: 240, col: 9 }), interpolater:  }, Tag(Default, 11): Metadata { name: "TOML file", source: None, provide_location: Some(Location { file: "C:\\Users\\shabo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rocket-0.5.0-rc.2\\src\\config\\config.rs", line: 241, col: 14 }), interpolater:  }, Tag(Default, 12): Metadata { name: "`ROCKET_` environment variable(s)", source: None, provide_location: Some(Location { file: "C:\\Users\\shabo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rocket-0.5.0-rc.2\\src\\config\\config.rs", line: 242, col: 14 }), interpolater:  }, Tag(Default, 13): Metadata { name: "Default", source: None, provide_location: Some(Location { file: "C:\\Users\\shabo\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rocket-0.5.0-rc.2\\src\\rocket.rs", line: 187, col: 22 }), interpolater:  }}, value: Ok({Profile(Uncased { string: "default" }): {"address": String(Tag(Default, 10), "127.0.0.1"), "cli_colors": Bool(Tag(Default, 10), true), "ident": String(Tag(Default, 10), "Rocket"), "keep_alive": Num(Tag(Default, 10), U32(5)), "limits": Dict(Tag(Default, 10), {"bytes": Num(Tag(Default, 10), U64(8192)), "data-form": Num(Tag(Default, 10), U64(2097152)), "file": Num(Tag(Default, 10), U64(1048576)), "form": Num(Tag(Default, 10), U64(32768)), "json": Num(Tag(Default, 10), U64(1048576)), "msgpack": Num(Tag(Default, 10), U64(1048576)), "string": Num(Tag(Default, 10), U64(8192))}), "log_level": String(Tag(Default, 10), "normal"), "port": Num(Tag(Default, 10), U16(8000)), "shutdown": Dict(Tag(Default, 10), {"ctrlc": Bool(Tag(Default, 10), true), "force": Bool(Tag(Default, 10), true), "grace": Num(Tag(Default, 10), U32(2)), "mercy": Num(Tag(Default, 10), U32(3))}), "temp_dir": String(Tag(Default, 10), "C:\\Users\\shabo\\AppData\\Local\\Temp\\"), "workers": Num(Tag(Default, 10), U64(16))}, Profile(Uncased { string: "global" }): {}}) }, config: Config { profile: Profile(Uncased { string: "debug" }), address: 127.0.0.1, port: 8000, workers: 16, ident: Ident(Some("Rocket")), limits: Limits { limits: [(Uncased { string: "bytes" }, ByteUnit(8192)), (Uncased { string: "data-form" }, ByteUnit(2097152)), (Uncased { string: "file" }, ByteUnit(1048576)), (Uncased { string: "form" }, ByteUnit(32768)), (Uncased { string: "json" }, ByteUnit(1048576)), (Uncased { string: "msgpack" }, ByteUnit(1048576)), (Uncased { string: "string" }, ByteUnit(8192))] }, temp_dir: RelativePathBuf { metadata_path: None, path: "C:\\Users\\shabo\\AppData\\Local\\Temp\\" }, keep_alive: 5, shutdown: Shutdown { ctrlc: true, grace: 2, mercy: 3, force: true, __non_exhaustive: () }, log_level: Normal, cli_colors: true, __non_exhaustive: () }, state: Container { len: 0 }, shutdown: Shutdown(TripWire { tripped: true }) }, None)
[2022-06-22 22:21:17 ERROR] Tried to create user with nonexistent role: player
[2022-06-22 22:37:14 ERROR] Tried to create user with nonexistent role: player
